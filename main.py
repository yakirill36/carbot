from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from supabase import create_client, Client
import asyncio
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = ""
SUPABASE_URL = ""
SUPABASE_KEY = ""
ADMIN_ID = 534737101

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_states = {}

# –ö–Ω–æ–ø–∫–∏
contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

allow_direct_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ")],
        [KeyboardButton(text="üö† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    response = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    if response.data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}
        return

    user_states[user_id] = {"step": "awaiting_phone", "username": username}
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöò\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=contact_keyboard
    )

@dp.message(lambda message: message.contact is not None)
async def contact_handler(message: Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    username = message.from_user.username

    supabase.table("users").insert({
        "telegram_id": user_id,
        "username": username,
        "phone_number": phone_number,
        "verified": False,
        "allow_direct": False
    }).execute()

    user_states[user_id] = {"step": "awaiting_car_number", "phone_number": phone_number, "username": username}
    await message.answer("–ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=ReplyKeyboardRemove())

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states.get(user_id)

    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {"step": "search_car"}
        return

    if text == "üö† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üö∞", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {"step": "support_message"}
        return

    if state is None:
        response = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
        if response.data:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
        else:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return

    if state["step"] == "support_message":
        await bot.send_message(ADMIN_ID, f"üì¨ –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n–û—Ç: @{message.from_user.username}\nID: {user_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}

    elif state["step"] == "awaiting_car_number":
        car_number = text.upper().replace(" ", "")
        supabase.table("users").update({"car_number": car_number}).eq("telegram_id", user_id).execute()
        user_states[user_id] = {**state, "car_number": car_number, "step": "awaiting_allow_direct"}
        await message.answer("–†–∞–∑—Ä–µ—à–∞–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –õ–°? –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –±–æ—Ç.", reply_markup=allow_direct_keyboard)

    elif state["step"] == "awaiting_allow_direct":
        if text.lower() in ["–¥–∞", "yes"]:
            allow_direct = True
        elif text.lower() in ["–Ω–µ—Ç", "no"]:
            allow_direct = False
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=allow_direct_keyboard)
            return

        supabase.table("users").update({
            "verified": True,
            "allow_direct": allow_direct
        }).eq("telegram_id", user_id).execute()

        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}

    elif state["step"] == "search_car":
        car_number = text.upper().replace(" ", "")
        result = supabase.table("users").select("*").eq("car_number", car_number).execute()

        if result.data:
            target_user = result.data[0]
            target_id = target_user["telegram_id"]
            user_states[user_id] = {
                "step": "dialog",
                "target_id": target_id,
                "car_number": car_number
            }
            user_states[target_id] = {
                "step": "dialog",
                "target_id": user_id,
                "car_number": car_number
            }

            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{target_user.get('username')}\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                    resize_keyboard=True
                )
            )
            await bot.send_message(
                target_id,
                f"üöó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º –∞–≤—Ç–æ {car_number} –Ω–∞—á–∞–ª —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –∑–¥–µ—Å—å.\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                    resize_keyboard=True
                )
            )
        else:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –Ω–∞—à –±–æ—Ç, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç.",
                reply_markup=main_menu
            )
            user_states[user_id] = {"step": "idle"}

    elif state["step"] == "dialog":
        if text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            target_id = state["target_id"]
            await message.answer("–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            await bot.send_message(target_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ (–î–∞/–ù–µ—Ç).")
            user_states[target_id] = {"step": "confirm_end", "initiator_id": user_id}
            return

        msg = text
        target_id = state["target_id"]
        car_number = state.get("car_number", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        try:
            await bot.send_message(
                target_id,
                f"üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {car_number}:\n{msg}"
            )
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        except:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

    elif state["step"] == "confirm_end":
        if text.lower() in ["–¥–∞", "yes"]:
            initiator_id = state["initiator_id"]
            await bot.send_message(initiator_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ‚úÖ", reply_markup=main_menu)
            await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
            user_states[initiator_id] = {"step": "idle"}
        else:
            await message.answer("–î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.", reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                resize_keyboard=True
            ))
            initiator_id = state["initiator_id"]
            user_states[user_id] = {"step": "dialog", "target_id": initiator_id}
            user_states[initiator_id] = {"step": "dialog", "target_id": user_id}

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
