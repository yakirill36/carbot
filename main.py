import asyncio
import logging
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from supabase import create_client, Client
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
HIMERA_API_KEY = os.getenv("HIMERA_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0")) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env

if not BOT_TOKEN or not SUPABASE_URL or not SUPABASE_KEY or not HIMERA_API_KEY:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY, HIMERA_API_KEY")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# user_states: {user_id: {"step": "...", "target_id": ..., "sender_car_number": ..., "target_car_number": ...}}
user_states = {}
# pending_shutdowns: {initiator_user_id: {"target_id": ..., "shutdown_time": datetime_object}}
pending_shutdowns = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

allow_direct_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ")],
        [KeyboardButton(text="üö† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

dialog_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
    ],
    resize_keyboard=True
)

shutdown_request_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")],
        [KeyboardButton(text="‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def search_himera(car_number: str):
    url = f"https://api.himera.search/v2/lookup?car_number={car_number}"
    headers = {"Authorization": f"Bearer {HIMERA_API_KEY}"}
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers, timeout=10) # –î–æ–±–∞–≤–∏–ª —Ç–∞–π–º–∞—É—Ç
            response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ 4xx/5xx
            return response.json()
    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Himera API –¥–ª—è –Ω–æ–º–µ—Ä–∞ {car_number}: {e}")
    except httpx.HTTPStatusError as e:
        logging.warning(f"Himera API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {e.response.status_code} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {car_number}: {e.response.text}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Himera API –¥–ª—è –Ω–æ–º–µ—Ä–∞ {car_number}: {e}")
    return None

async def cleanup_pending_shutdowns():
    while True:
        now = datetime.now()
        to_delete = []
        
        for initiator_id, data in pending_shutdowns.items():
            shutdown_time = data["shutdown_time"]
            target_id = data["target_id"]

            if now > shutdown_time:
                logging.info(f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {initiator_id} –∏ {target_id}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–±–æ–∏—Ö
                if initiator_id in user_states:
                    user_states[initiator_id]['step'] = 'dialog'
                if target_id in user_states:
                    user_states[target_id]['step'] = 'dialog'
                
                try:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
                    await bot.send_message(
                        initiator_id,
                        "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.",
                        reply_markup=dialog_keyboard
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É {initiator_id} –æ —Ç–∞–π–º–∞—É—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
                
                try:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –æ—Ç–æ–∑–≤–∞–ª –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ç–∞–π–º–∞—É—Ç
                    await bot.send_message(
                        target_id,
                        "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.",
                        reply_markup=dialog_keyboard
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏ {target_id} –æ —Ç–∞–π–º–∞—É—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
                
                to_delete.append(initiator_id)
        
        for initiator_id in to_delete:
            del pending_shutdowns[initiator_id]
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

async def on_startup():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ pending_shutdowns.")
    asyncio.create_task(cleanup_pending_shutdowns())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    response = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    if response.data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 'idle' —Å—Ç–∞—Ç—É—Å.")
        return

    user_states[user_id] = {"step": "awaiting_phone", "username": username}
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöò\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_keyboard)
    logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –û–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@dp.message(lambda message: message.contact is not None)
async def contact_handler(message: Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    username = message.from_user.username if message.from_user.username else f"id_{user_id}"

    response = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    if response.data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    try:
        supabase.table("users").insert({
            "telegram_id": user_id,
            "username": username,
            "phone_number": phone_number,
            "verified": False,
            "allow_direct": False,
            "source": "bot"
        }).execute()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–º–µ—Ä–æ–º {phone_number}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ Supabase: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}
        return

    user_states[user_id] = {
        "step": "awaiting_car_number",
        "phone_number": phone_number,
        "username": username
    }
    await message.answer("–ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=ReplyKeyboardRemove())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä, –æ–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ.")

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states.get(user_id, {"step": "idle"})
    logging.info(f"User {user_id} current state: {state['step']}, message: {text[:50]}") # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {"step": "search_car"}
        logging.info(f"User {user_id} –ø–µ—Ä–µ—à–µ–ª –∫ –ø–æ–∏—Å–∫—É –∞–≤—Ç–æ.")
        return

    if text == "üö† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üö∞", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {"step": "support_message"}
        logging.info(f"User {user_id} –ø–µ—Ä–µ—à–µ–ª –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
        return

    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        target_id = state.get("target_id")
        if target_id and user_states.get(target_id, {}).get("target_id") == user_id: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            pending_shutdowns[user_id] = {"target_id": target_id, "shutdown_time": datetime.now() + timedelta(minutes=3)} # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            user_states[user_id]['step'] = 'awaiting_shutdown_confirmation'
            user_states[target_id]['step'] = 'shutdown_requested' # –¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å

            try:
                await bot.send_message(
                    target_id,
                    "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
                    reply_markup=shutdown_request_keyboard
                )
                await message.answer(
                    "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                    reply_markup=ReplyKeyboardRemove()
                )
                logging.info(f"User {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å {target_id}.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ {user_id} -> {target_id}: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=dialog_keyboard)
                user_states[user_id]['step'] = 'dialog' # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥
                user_states[target_id]['step'] = 'dialog'
                if user_id in pending_shutdowns:
                    del pending_shutdowns[user_id]
        else:
            await message.answer("–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ –∏–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (target_id)
    if state["step"] == "shutdown_requested":
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —ç—Ç–∏–º user_id
        initiator_id = None
        for initiator, data in pending_shutdowns.items():
            if data["target_id"] == user_id:
                initiator_id = initiator
                break

        if initiator_id:
            if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ":
                logging.info(f"User {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å {initiator_id}.")
                try:
                    await bot.send_message(
                        initiator_id,
                        "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω.",
                        reply_markup=main_menu
                    )
                    await message.answer(
                        "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω.",
                        reply_markup=main_menu
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±–æ–∏–º {initiator_id}/{user_id}: {e}")
                
                user_states[user_id] = {"step": "idle"}
                user_states[initiator_id] = {"step": "idle"}
                if initiator_id in pending_shutdowns:
                    del pending_shutdowns[initiator_id]
                return

            elif text == "‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ":
                logging.info(f"User {user_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –∑–∞–≤–µ—Ä—à–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å {initiator_id}.")
                try:
                    await bot.send_message(
                        initiator_id,
                        "‚û°Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.",
                        reply_markup=dialog_keyboard
                    )
                    await message.answer(
                        "‚û°Ô∏è –î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.",
                        reply_markup=dialog_keyboard
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏–º {initiator_id}/{user_id}: {e}")

                user_states[user_id]['step'] = 'dialog'
                user_states[initiator_id]['step'] = 'dialog'
                if initiator_id in pending_shutdowns:
                    del pending_shutdowns[initiator_id]
                return
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞.", reply_markup=shutdown_request_keyboard)
                return
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç –≤–∞—Å.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
            return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –∂–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (initiator_id)
    if state["step"] == "awaiting_shutdown_confirmation":
        await message.answer("‚è≥ –í—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    # --- –õ–æ–≥–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
    if state["step"] == "support_message":
        if ADMIN_ID != 0: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            try:
                await bot.send_message(ADMIN_ID, f"üì¨ –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n–û—Ç: @{message.from_user.username if message.from_user.username else user_id}\nID: {user_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
                await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.", reply_markup=main_menu)
                user_states[user_id] = {"step": "idle"}
                logging.info(f"–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=main_menu)
                user_states[user_id] = {"step": "idle"}
        else:
            await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
        return

    # --- –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ) ---
    elif state["step"] == "awaiting_car_number":
        car_number = text.upper().replace(" ", "")
        try:
            supabase.table("users").update({"car_number": car_number}).eq("telegram_id", user_id).execute()
            user_states[user_id] = {**state, "car_number": car_number, "step": "awaiting_allow_direct"}
            await message.answer("–†–∞–∑—Ä–µ—à–∞–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –õ–°?", reply_markup=allow_direct_keyboard)
            logging.info(f"User {user_id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä –∞–≤—Ç–æ {car_number}. –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –õ–°.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ car_number –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
        return

    elif state["step"] == "awaiting_allow_direct":
        allow_direct = text.lower() in ["–¥–∞", "yes"]
        if text.lower() not in ["–¥–∞", "yes", "–Ω–µ—Ç", "no"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=allow_direct_keyboard)
            return
        try:
            supabase.table("users").update({"verified": True, "allow_direct": allow_direct}).eq("telegram_id", user_id).execute()
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
            logging.info(f"User {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. allow_direct: {allow_direct}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ allow_direct –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
        return

    # --- –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ ---
    elif state["step"] == "search_car":
        car_number_to_search = text.upper().replace(" ", "")
        logging.info(f"User {user_id} –∏—â–µ—Ç –Ω–æ–º–µ—Ä –∞–≤—Ç–æ: {car_number_to_search}")

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ Supabase
        result = supabase.table("users").select("*").eq("car_number", car_number_to_search).execute()
        target_user = result.data[0] if result.data else None
        
        source = "supabase"
        if not target_user:
            logging.info(f"–ê–≤—Ç–æ {car_number_to_search} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase, –ø—Ä–æ–±—É–µ–º Himera.")
            himera_data = await search_himera(car_number_to_search)
            if himera_data:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ Himera, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π car_number —É–∂–µ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                existing_user_by_himera_car = supabase.table("users").select("*").eq("car_number", himera_data.get("car_number")).execute().data
                if existing_user_by_himera_car:
                    target_user = existing_user_by_himera_car[0]
                    source = "supabase_from_himera_existing"
                    logging.info(f"–ê–≤—Ç–æ {car_number_to_search} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Himera, –Ω–æ —É–∂–µ –µ—Å—Ç—å –≤ Supabase.")
                else:
                    new_user = {
                        "car_number": himera_data.get("car_number"),
                        "username": himera_data.get("telegram"), # Himera –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å username
                        "phone_number": himera_data.get("phone"),
                        "verified": False,
                        "allow_direct": False, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false –¥–ª—è Himera-–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                        "source": "himera",
                        "telegram_id": None # ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                    }
                    try:
                        inserted_data = supabase.table("users").insert(new_user).execute()
                        target_user = inserted_data.data[0] # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ ID –≤ Supabase
                        source = "himera_new"
                        logging.info(f"–ê–≤—Ç–æ {car_number_to_search} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Himera –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Supabase.")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Himera –≤ Supabase: {e}")
                        target_user = None # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –Ω–∞—à–ª–∏
            else:
                logging.info(f"–ê–≤—Ç–æ {car_number_to_search} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Supabase, –Ω–∏ –≤ Himera.")

        if target_user:
            target_id = target_user.get("telegram_id")
            allow_direct = target_user.get("allow_direct", False)
            username = target_user.get("username")
            target_car_number = target_user.get("car_number", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

            current_user_data = supabase.table("users").select("car_number").eq("telegram_id", user_id).execute()
            sender_car_number = current_user_data.data[0].get("car_number") if current_user_data.data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            # –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
            if target_id == user_id:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.", reply_markup=main_menu)
                user_states[user_id] = {"step": "idle"}
                return

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ —Ä–∞–∑—Ä–µ—à–∏–ª –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if target_id and allow_direct:
                if username:
                    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{username}\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é.", reply_markup=main_menu)
                else:
                    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω (ID: {target_id}). –û–Ω —Ä–∞–∑—Ä–µ—à–∏–ª –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –µ–≥–æ —á–µ—Ä–µ–∑ ID –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –æ–Ω —Å–∞–º –Ω–∞–ø–∏—à–µ—Ç.", reply_markup=main_menu)
                user_states[user_id] = {"step": "idle"}
                logging.info(f"User {user_id} –Ω–∞–π–¥–µ–Ω {target_id}, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–∏–∞–ª–æ–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–ª–∏ –µ–≥–æ telegram_id –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Himera)
            elif target_id: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ, –Ω–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ target_id —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∫–µ–º-—Ç–æ
                target_state = user_states.get(target_id, {"step": "idle"})
                if target_state.get("step") in ["awaiting_first_message", "dialog", "awaiting_shutdown_confirmation", "shutdown_requested"]:
                    await message.answer(f"–í–ª–∞–¥–µ–ª–µ—Ü –∞–≤—Ç–æ {target_car_number} —Å–µ–π—á–∞—Å —É–∂–µ –∑–∞–Ω—è—Ç –≤ –¥—Ä—É–≥–æ–º –¥–∏–∞–ª–æ–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
                    user_states[user_id] = {"step": "idle"}
                    logging.info(f"User {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å {target_id}, –Ω–æ —Ç–æ—Ç –∑–∞–Ω—è—Ç.")
                    return

                user_states[user_id] = {
                    "step": "awaiting_first_message", # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∂–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    "target_id": target_id,
                    "sender_car_number": sender_car_number,
                    "target_car_number": target_car_number
                }
                user_states[target_id] = {
                    "step": "dialog", # –¶–µ–ª—å —Å—Ä–∞–∑—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    "target_id": user_id,
                    "sender_car_number": target_car_number, # –î–ª—è —Ü–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —ç—Ç–æ car_number –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                    "target_car_number": sender_car_number # –î–ª—è —Ü–µ–ª–∏ —Ü–µ–ª—å - —ç—Ç–æ –µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π car_number
                }

                await message.answer(
                    f"üîπ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∞–≤—Ç–æ {target_car_number}.\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                    reply_markup=dialog_keyboard
                )
                
                # –°–æ–æ–±—â–∞–µ–º —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤—Ö–æ–¥—è—â–µ–º –¥–∏–∞–ª–æ–≥–µ
                try:
                    await bot.send_message(
                        target_id,
                        f"üîπ –í–ª–∞–¥–µ–ª–µ—Ü –∞–≤—Ç–æ {sender_car_number} —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥.\n"
                        "–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                        reply_markup=dialog_keyboard
                    )
                    logging.info(f"User {user_id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å {target_id}. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç {user_id}: {e}")
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.", reply_markup=main_menu)
                    user_states[user_id] = {"step": "idle"}
                    del user_states[target_id] # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Himera, –Ω–æ –±–µ–∑ telegram_id
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –µ–≥–æ telegram_id –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.", reply_markup=main_menu)
                user_states[user_id] = {"step": "idle"}
                logging.info(f"User {user_id} –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {car_number_to_search} –¥–ª—è –¥–∏–∞–ª–æ–≥–∞.")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ —á–µ—Ä–µ–∑ Himera.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
            logging.info(f"User {user_id} –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {car_number_to_search} –≤–æ–æ–±—â–µ.")
        return

    # --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ ---
    elif state["step"] == "awaiting_first_message" or state["step"] == "dialog":
        target_id = state.get("target_id")
        if not target_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
            logging.warning(f"User {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state['step']}, –Ω–æ target_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å —Ç–µ–∫—É—â–∏–º
        target_state = user_states.get(target_id)
        if not target_state or target_state.get("target_id") != user_id or target_state.get("step") not in ["awaiting_first_message", "dialog"]:
            await message.answer("‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
            logging.warning(f"User {user_id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {target_id} –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç. target_state: {target_state}")
            return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            await bot.send_message(
                target_id,
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ {state.get('sender_car_number', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}:\n\n{text}",
                reply_markup=dialog_keyboard
            )
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            await message.answer(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!",
                reply_markup=dialog_keyboard
            )
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'dialog'
            user_states[user_id]['step'] = 'dialog'
            user_states[target_id]['step'] = 'dialog'
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –∫ {target_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –û–±–∞ –≤ 'dialog' —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id} –∫ {target_id}: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞.",
                reply_markup=main_menu
            )
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –æ–±–æ–∏—Ö, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            user_states[user_id] = {"step": "idle"}
            if target_id in user_states:
                user_states[target_id] = {"step": "idle"}
            try:
                await bot.send_message(target_id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ target_id
            logging.info(f"–î–∏–∞–ª–æ–≥ –º–µ–∂–¥—É {user_id} –∏ {target_id} –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    # --- –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è ---
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}
        logging.info(f"User {user_id} –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{state['step']}'. –°–±—Ä–æ—Å –Ω–∞ 'idle'.")

async def main():
    logging.info("Starting bot polling...")
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
