import asyncio
import logging
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from supabase import create_client, Client
import httpx

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
HIMERA_API_KEY = os.getenv("HIMERA_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not BOT_TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_states = {}
pending_shutdowns = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

allow_direct_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ")],
        [KeyboardButton(text="üö† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

shutdown_request_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")],
        [KeyboardButton(text="‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

async def search_himera(car_number: str):
    url = f"https://api.himera.search/v2/lookup?car_number={car_number}"
    headers = {"Authorization": f"Bearer {HIMERA_API_KEY}"}
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            if response.status_code == 200:
                return response.json()
            else:
                logging.warning(f"Himera API error: {response.status_code} - {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Himera API: {e}")
    return None

async def cleanup_pending_shutdowns():
    while True:
        now = datetime.now()
        to_delete = []
        
        for user_id, shutdown_time in pending_shutdowns.items():
            if now > shutdown_time:
                target_id = user_states.get(user_id, {}).get('target_id')
                if target_id:
                    try:
                        await bot.send_message(
                            user_id,
                            "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è",
                            reply_markup=ReplyKeyboardMarkup(
                                keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                                resize_keyboard=True
                            )
                        )
                        await bot.send_message(
                            target_id,
                            "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è",
                            reply_markup=ReplyKeyboardMarkup(
                                keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                                resize_keyboard=True
                            )
                        )
                    except:
                        pass
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
                    if user_id in user_states:
                        user_states[user_id]['step'] = 'dialog'
                    if target_id in user_states:
                        user_states[target_id]['step'] = 'dialog'
                to_delete.append(user_id)
        
        for user_id in to_delete:
            del pending_shutdowns[user_id]
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

async def on_startup():
    asyncio.create_task(cleanup_pending_shutdowns())

@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    response = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    if response.data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}
        return

    user_states[user_id] = {"step": "awaiting_phone", "username": username}
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöò\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_keyboard)

@dp.message(lambda message: message.contact is not None)
async def contact_handler(message: Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    username = message.from_user.username

    response = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    if response.data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}
        return

    supabase.table("users").insert({
        "telegram_id": user_id,
        "username": username,
        "phone_number": phone_number,
        "verified": False,
        "allow_direct": False,
        "source": "bot"
    }).execute()

    user_states[user_id] = {
        "step": "awaiting_car_number",
        "phone_number": phone_number,
        "username": username
    }
    await message.answer("–ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=ReplyKeyboardRemove())

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states.get(user_id, {"step": "idle"})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {"step": "search_car"}
        return

    if text == "üö† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üö∞", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {"step": "support_message"}
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        target_id = state.get("target_id")
        if target_id:
            pending_shutdowns[user_id] = datetime.now() + timedelta(minutes=5)
            user_states[user_id]['step'] = 'awaiting_shutdown_confirmation'
            user_states[target_id]['step'] = 'shutdown_requested'
            
            await bot.send_message(
                target_id,
                "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
                reply_markup=shutdown_request_keyboard
            )
            await message.answer(
                "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                reply_markup=ReplyKeyboardRemove()
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if state["step"] == "shutdown_requested" and text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ":
        target_id = state.get("target_id")
        if target_id and user_id in pending_shutdowns:
            await bot.send_message(
                target_id,
                "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω.",
                reply_markup=main_menu
            )
            await message.answer(
                "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω.",
                reply_markup=main_menu
            )
            user_states[user_id] = {"step": "idle"}
            user_states[target_id] = {"step": "idle"}
            if target_id in pending_shutdowns:
                del pending_shutdowns[target_id]
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if state["step"] == "shutdown_requested" and text == "‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ":
        target_id = state.get("target_id")
        if target_id and user_id in pending_shutdowns:
            await bot.send_message(
                target_id,
                "‚û°Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                    resize_keyboard=True
                )
            )
            await message.answer(
                "‚û°Ô∏è –î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                    resize_keyboard=True
                )
            )
            user_states[user_id]['step'] = 'dialog'
            user_states[target_id]['step'] = 'dialog'
            if target_id in pending_shutdowns:
                del pending_shutdowns[target_id]
        return

    # –õ–æ–≥–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if state["step"] == "support_message":
        await bot.send_message(ADMIN_ID, f"üì¨ –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n–û—Ç: @{message.from_user.username}\nID: {user_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}

    # –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    elif state["step"] == "awaiting_car_number":
        car_number = text.upper().replace(" ", "")
        supabase.table("users").update({"car_number": car_number}).eq("telegram_id", user_id).execute()
        user_states[user_id] = {**state, "car_number": car_number, "step": "awaiting_allow_direct"}
        await message.answer("–†–∞–∑—Ä–µ—à–∞–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –õ–°?", reply_markup=allow_direct_keyboard)

    elif state["step"] == "awaiting_allow_direct":
        allow_direct = text.lower() in ["–¥–∞", "yes"]
        if text.lower() not in ["–¥–∞", "yes", "–Ω–µ—Ç", "no"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=allow_direct_keyboard)
            return
        supabase.table("users").update({"verified": True, "allow_direct": allow_direct}).eq("telegram_id", user_id).execute()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}

    # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –¥–∏–∞–ª–æ–≥–∞
    elif state["step"] == "search_car":
        car_number = text.upper().replace(" ", "")
        result = supabase.table("users").select("*").eq("car_number", car_number).execute()
        target_user = result.data[0] if result.data else None

        if not target_user:
            himera_data = await search_himera(car_number)
            if himera_data and "car_number" in himera_data:
                new_user = {
                    "car_number": himera_data.get("car_number"),
                    "username": himera_data.get("telegram"),
                    "phone_number": himera_data.get("phone"),
                    "verified": False,
                    "allow_direct": False,
                    "source": "himera",
                    "telegram_id": None
                }
                supabase.table("users").insert(new_user).execute()
                target_user = new_user

        if target_user:
            target_id = target_user.get("telegram_id")
            allow_direct = target_user.get("allow_direct", False)
            username = target_user.get("username")
            target_car_number = target_user.get("car_number", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

            current_user_data = supabase.table("users").select("car_number").eq("telegram_id", user_id).execute()
            sender_car_number = current_user_data.data[0].get("car_number") if current_user_data.data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            if target_id and allow_direct:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{username if username else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é.", reply_markup=main_menu)
  elif target_id:
                user_states[user_id] = {
                    "step": "awaiting_first_message",
                    "target_id": target_id,
                    "sender_car_number": sender_car_number,
                    "target_car_number": target_car_number
                }
                user_states[target_id] = {
                    "step": "dialog",
                    "target_id": user_id,
                    "sender_car_number": sender_car_number,
                    "target_car_number": target_car_number
                }

                                await message.answer(
                    f"üîπ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∞–≤—Ç–æ {target_car_number}.\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                        resize_keyboard=True
                    )
                )

          await bot.send_message(
                    target_id,
                    f"üîπ –í–ª–∞–¥–µ–ª–µ—Ü –∞–≤—Ç–æ {sender_car_number} –Ω–∞—á–∞–ª —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥.\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                        resize_keyboard=True
                    )
                )
                return
            else:
                await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.", reply_markup=main_menu)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ —á–µ—Ä–µ–∑ Himera.", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}

    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    elif state["step"] == "awaiting_first_message":
        target_id = state.get("target_id")
        if not target_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu)
            user_states[user_id] = {"step": "idle"}
            return

         try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            await bot.send_message(
                target_id,
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ {state.get('sender_car_number', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}:\n\n{text}",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                    resize_keyboard=True
                )
            )
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            await message.answer(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                    resize_keyboard=True
                )
            )
            # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
            user_states[user_id]['step'] = 'dialog'
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.",
                reply_markup=main_menu
            )
            user_states[user_id] = {"step": "idle"}

    # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu)
        user_states[user_id] = {"step": "idle"}

async def main():
    logging.basicConfig(level=logging.INFO)
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
